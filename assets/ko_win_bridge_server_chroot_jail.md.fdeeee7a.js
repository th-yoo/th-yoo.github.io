import{o as e,c as l,b as i}from"./app.b2aa9d0b.js";const o='{"title":"Chroot Jail","description":"","frontmatter":{"lang":"ko-KR","title":"Chroot Jail","navbar":true,"sidebar":"auto"},"headers":[{"level":2,"title":"외부(호스트)와 공유할 디렉토리","slug":"외부-호스트-와-공유할-디렉토리"},{"level":3,"title":"msys64와 겹치는 디렉토리","slug":"msys64와-겹치는-디렉토리"},{"level":3,"title":"Read Only로 바인드하는 노드(디렉토리, 파일)","slug":"read-only로-바인드하는-노드-디렉토리-파일"},{"level":3,"title":"Read Write로 바인드하는 노드(디렉토리, 파일)","slug":"read-write로-바인드하는-노드-디렉토리-파일"},{"level":3,"title":"합치는 디렉토리","slug":"합치는-디렉토리"},{"level":3,"title":"새로 만드는 디렉토리","slug":"새로-만드는-디렉토리"},{"level":2,"title":"ID 관리","slug":"id-관리"},{"level":3,"title":"ID 생성","slug":"id-생성"},{"level":3,"title":"SU","slug":"su"},{"level":2,"title":"X Forwarding","slug":"x-forwarding"},{"level":3,"title":"local sudo (ssh거친 remote 말고)","slug":"local-sudo-ssh거친-remote-말고"},{"level":3,"title":"ssh, sudo","slug":"ssh-sudo"},{"level":3,"title":"ssh, chroot, su","slug":"ssh-chroot-su"}],"relativePath":"ko/win_bridge_server/chroot_jail.md","lastUpdated":1624254955771}',t={},a=i('<h1 id="chroot-jail"><a class="header-anchor" href="#chroot-jail" aria-hidden="true">#</a> Chroot Jail</h1><h2 id="외부-호스트-와-공유할-디렉토리"><a class="header-anchor" href="#외부-호스트-와-공유할-디렉토리" aria-hidden="true">#</a> 외부(호스트)와 공유할 디렉토리</h2><ul><li>본서에서는 VM은 아니지만 편의상 외부 환경을 &#39;호스트&#39;, Chroot Jail 환경을 &#39;게스트&#39;라고 한다.</li></ul><h3 id="msys64와-겹치는-디렉토리"><a class="header-anchor" href="#msys64와-겹치는-디렉토리" aria-hidden="true">#</a> msys64와 겹치는 디렉토리</h3><ul><li>/dev: 호스트를 그대로 사용</li><li>/etc: 호스트와 합침</li><li>/home: 새로 만들어도 무방</li><li>/opt: 호스트를 그대로 사용</li><li>/tmp: 호스트를 그대로 사용</li><li>/usr: 호스트와 일부 합침</li><li>/var: 호스트와 일부 합침</li></ul><h3 id="read-only로-바인드하는-노드-디렉토리-파일"><a class="header-anchor" href="#read-only로-바인드하는-노드-디렉토리-파일" aria-hidden="true">#</a> Read Only로 바인드하는 노드(디렉토리, 파일)</h3><p><code>$ sudo mount -o bind,ro &quot;/$dir&quot; &quot;$newroot/$dir&quot;</code></p><ul><li>/lib</li><li>/lib64</li><li>/sbin</li><li>/usr/lib/x86_64-linux-gnu</li></ul><h3 id="read-write로-바인드하는-노드-디렉토리-파일"><a class="header-anchor" href="#read-write로-바인드하는-노드-디렉토리-파일" aria-hidden="true">#</a> Read Write로 바인드하는 노드(디렉토리, 파일)</h3><p><code>$ sudo mount -o bind &quot;/$dir&quot; &quot;$newroot/$dir&quot;</code></p><ul><li>/proc</li><li>/sys</li><li>/dev</li><li>/dev/pts</li><li>/tmp</li><li>/opt</li></ul><h3 id="합치는-디렉토리"><a class="header-anchor" href="#합치는-디렉토리" aria-hidden="true">#</a> 합치는 디렉토리</h3><p><code>$ mkdir -p &quot;$newroot/$dir&quot;</code></p><ul><li>/etc</li><li>/var</li><li>/usr/bin</li></ul><h3 id="새로-만드는-디렉토리"><a class="header-anchor" href="#새로-만드는-디렉토리" aria-hidden="true">#</a> 새로 만드는 디렉토리</h3><p><code>$ mkdir -p &quot;$newroot/$dir&quot;</code></p><ul><li>/bin</li><li>/home/$USER</li></ul><h2 id="id-관리"><a class="header-anchor" href="#id-관리" aria-hidden="true">#</a> ID 관리</h2><h3 id="id-생성"><a class="header-anchor" href="#id-생성" aria-hidden="true">#</a> ID 생성</h3><ul><li>일단은 패스워드 없이</li><li>PAM과 NSS 없이</li></ul><div class="language-"><pre><code>$ cat &gt; &quot;$newroot/etc/passwd&quot; &lt;&lt;- EOS\n\troot::0:0:root:/root:/bin/bash\n\t&quot;$USER::$UID:$(id -g):$USER:/home/$USER:/bin/bash&quot;\nEOS\n\n$ cat &gt; &quot;$newroot/etc/group&quot; &lt;&lt;- EOS\n\troot::0:\n\t&quot;$USER::$(id -g):\nEOS\n</code></pre></div><h3 id="su"><a class="header-anchor" href="#su" aria-hidden="true">#</a> SU</h3><ul><li>호스트의 SU, SUDO는 libpam을 링크하고 있기 때문에 반드시 PAM, NSS 환경이 있어야 한다.</li></ul><div class="language-"><pre><code>$ ldd `which su`\n\tlinux-vdso.so.1 (0x00007fff893b7000)\n\tlibpam.so.0 =&gt; /lib/x86_64-linux-gnu/libpam.so.0 (0x00007f93cdbf0000)\n\tlibpam_misc.so.0 =&gt; /lib/x86_64-linux-gnu/libpam_misc.so.0 (0x00007f93cdbeb000)\n\tlibutil.so.1 =&gt; /lib/x86_64-linux-gnu/libutil.so.1 (0x00007f93cdbe6000)\n\tlibc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f93cd9f4000)\n\tlibaudit.so.1 =&gt; /lib/x86_64-linux-gnu/libaudit.so.1 (0x00007f93cd9c8000)\n\tlibdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f93cd9c2000)\n\t/lib64/ld-linux-x86-64.so.2 (0x00007f93cdc25000)\n\tlibcap-ng.so.0 =&gt; /lib/x86_64-linux-gnu/libcap-ng.so.0 (0x00007f93cd9b8000)\n</code></pre></div><ul><li>PAM과 NSS 환경을 Chroot Jail로 옮기지 않으려면 호스트의 SU 대신 busybox를 쓴다</li><li>참고) docker는 일반적으로 container안에서 root로 실행</li></ul><div class="language-"><pre><code>$ cp /bin/busybox &quot;$newroot/bin&quot;\n$ ln -s /bin/busybox &quot;$newroot/bin/su&quot;\n</code></pre></div><h2 id="x-forwarding"><a class="header-anchor" href="#x-forwarding" aria-hidden="true">#</a> X Forwarding</h2><h3 id="local-sudo-ssh거친-remote-말고"><a class="header-anchor" href="#local-sudo-ssh거친-remote-말고" aria-hidden="true">#</a> local sudo (ssh거친 remote 말고)</h3><ul><li>sudo할 때 pam_xauth가 source user의 X Cookie를 target user의 .Xautority에 merge</li></ul><div class="language-"><pre><code>sudo echo &quot;session    optional   pam_xauth.so&quot; &gt;&gt; /etc/pam.d/sudo\n</code></pre></div><h3 id="ssh-sudo"><a class="header-anchor" href="#ssh-sudo" aria-hidden="true">#</a> ssh, sudo</h3><p>.bashrc에 추가</p><div class="language-"><pre><code># access(&quot;/root/.Xauthority&quot;, R_OK)       = -1 ENOENT (No such file or directory)\nexport XAUTHORITY=&quot;/home/$USER/.Xauthority&quot;\n</code></pre></div><h3 id="ssh-chroot-su"><a class="header-anchor" href="#ssh-chroot-su" aria-hidden="true">#</a> ssh, chroot, su</h3><div class="language-"><pre><code>$ cp &quot;/home/$USER/.Xauthority&quot; &quot;$newroot/home/$USER&quot;\n$ cp /etc/hosts &quot;$newroot/etc&quot;\n$ sudo chroot &quot;$newroot&quot;\n# su &lt;USER&gt; -\n$ xmessage -center &#39;hello!&#39;\n</code></pre></div>',35);t.render=function(i,o,t,r,s,d){return e(),l("div",null,[a])};export default t;export{o as __pageData};
